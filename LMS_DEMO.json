{
	"info": {
		"_postman_id": "lms-backend-api-collection",
		"name": "LMS Backend API",
		"description": "Learning Management System Backend API Collection\n\nüöÄ **Setup:**\n1. Import this collection to Postman\n2. Import the Environment file\n3. Start with Health Check\n4. Test Authentication endpoints\n\nüìù **Test Accounts:**\n- Admin: admin@lms.test / password123\n- Teacher: guru.matematika@lms.test / password123\n- Student: siswa1@lms.test / password123",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the server is running and healthy"
					},
					"response": []
				}
			],
			"description": "Basic health check endpoints"
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(201)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('AUTH_TOKEN', response.data.token);",
									"        console.log('‚úÖ Admin registered and token saved');",
									"    }",
									"} else {",
									"    console.log('‚ùå Registration failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Admin\",\n    \"email\": \"testadmin@lms.test\",\n    \"password\": \"password123\",\n    \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new admin user"
					},
					"response": []
				},
				{
					"name": "Register Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(201)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('TEACHER_TOKEN', response.data.token);",
									"        console.log('‚úÖ Teacher registered and token saved');",
									"    }",
									"} else {",
									"    console.log('‚ùå Registration failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Teacher\",\n    \"email\": \"testteacher@lms.test\",\n    \"password\": \"password123\",\n    \"role\": \"TEACHER\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new teacher"
					},
					"response": []
				},
				{
					"name": "Register Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(201)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('STUDENT_TOKEN', response.data.token);",
									"        console.log('‚úÖ Student registered and token saved');",
									"    }",
									"} else {",
									"    console.log('‚ùå Registration failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Student\",\n    \"email\": \"teststudent@lms.test\",\n    \"password\": \"password123\",\n    \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new student (default role)"
					},
					"response": []
				},
				{
					"name": "Login Admin (Seeded)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(200)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('AUTH_TOKEN', response.data.token);",
									"        pm.environment.set('USER_ID', response.data.user.id);",
									"        pm.environment.set('USER_EMAIL', response.data.user.email);",
									"        pm.environment.set('USER_ROLE', response.data.user.role);",
									"        console.log('‚úÖ Login successful, token saved');",
									"        console.log('üë§ User:', response.data.user.name, '(' + response.data.user.role + ')');",
									"    }",
									"} else {",
									"    console.log('‚ùå Login failed:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@lms.test\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with seeded admin account"
					},
					"response": []
				},
				{
					"name": "Login Teacher (Seeded)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(200)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('TEACHER_TOKEN', response.data.token);",
									"        console.log('‚úÖ Teacher login successful');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guru.matematika@lms.test\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with seeded teacher account"
					},
					"response": []
				},
				{
					"name": "Login Student (Seeded)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.to.have.status(200)) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.token) {",
									"        pm.environment.set('STUDENT_TOKEN', response.data.token);",
									"        console.log('‚úÖ Student login successful');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"siswa1@lms.test\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with seeded student account"
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/auth/profile",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Get current user profile (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@lms.test\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/profile",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Update user profile information"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"password123\",\n    \"newPassword\": \"newpassword123\",\n    \"confirmPassword\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/change-password",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						},
						"description": "Change user password"
					},
					"response": []
				},
				{
					"name": "Verify Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/auth/verify",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"verify"
							]
						},
						"description": "Verify if the current token is valid"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout user (client should remove token)"
					},
					"response": []
				}
			],
			"description": "Authentication related endpoints for registration, login, profile management, etc."
		},
		{
			"name": "Protected Routes",
			"item": [
				{
					"name": "Test Protected Route",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/protected",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"protected"
							]
						},
						"description": "Test endpoint that requires authentication"
					},
					"response": []
				}
			],
			"description": "Protected routes that require authentication"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Login with Wrong Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@lms.test\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Test login with incorrect password"
					},
					"response": []
				},
				{
					"name": "Register with Existing Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Duplicate User\",\n    \"email\": \"admin@lms.test\",\n    \"password\": \"password123\",\n    \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Test registration with email that already exists"
					},
					"response": []
				},
				{
					"name": "Access Protected Route Without Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/protected",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"protected"
							]
						},
						"description": "Test accessing protected route without authentication token"
					},
					"response": []
				},
				{
					"name": "Access with Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.token.here",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/protected",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"protected"
							]
						},
						"description": "Test accessing protected route with invalid token"
					},
					"response": []
				},
				{
					"name": "Register with Invalid Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"A\",\n    \"email\": \"not-valid-email\",\n    \"password\": \"123\",\n    \"role\": \"INVALID_ROLE\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Test registration with invalid data (name too short, invalid email, weak password, invalid role)"
					},
					"response": []
				}
			],
			"description": "Test error scenarios and validation"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}