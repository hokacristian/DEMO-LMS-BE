paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email, name, password, and role
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: student@example.com
                  description: User's email address
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: John Doe
                  description: User's full name
                password:
                  type: string
                  minLength: 6
                  example: password123
                  description: User's password (minimum 6 characters)
                role:
                  type: string
                  enum: [ADMIN, TEACHER, STUDENT]
                  default: STUDENT
                  example: STUDENT
                  description: User's role in the system
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          expiresIn:
                            type: string
                            example: "7d"
        "400":
          description: Bad request - Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: student@example.com
                  description: User's email address
                password:
                  type: string
                  example: password123
                  description: User's password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          role:
                            type: string
                            example: "STUDENT"
                          token:
                            type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          expiresIn:
                            type: string
                            example: "7d"
        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error

  /auth/logout:
    post:
      summary: Logout user
      description: Logout the current user (client-side token removal)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /auth/profile:
    get:
      summary: Get current user profile
      description: Retrieve the profile information of the authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "404":
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized

    put:
      summary: Update user profile
      description: Update the profile information of the authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: John Smith
                  description: Updated user's name
                email:
                  type: string
                  format: email
                  example: johnsmith@example.com
                  description: Updated user's email
              minProperties: 1
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "400":
          description: Bad request - Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized

  /auth/change-password:
    put:
      summary: Change user password
      description: Change the password of the authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - confirmPassword
              properties:
                currentPassword:
                  type: string
                  example: oldpassword123
                  description: Current password
                newPassword:
                  type: string
                  minLength: 6
                  example: newpassword123
                  description: New password (minimum 6 characters)
                confirmPassword:
                  type: string
                  example: newpassword123
                  description: Confirmation of new password (must match newPassword)
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Bad request - Invalid data or passwords don't match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized

  /auth/verify:
    get:
      summary: Verify token validity
      description: Verify if the provided JWT token is valid
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "401":
          description: Token is invalid or expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"